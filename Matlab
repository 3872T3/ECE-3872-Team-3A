%% Simulation World
% Engineer: Tim Brothers
% Overview
%    This is a simulation for the Robotic Orchestra
% Design Name:   The Conductor
% File Name:     simulation_world.m
%
% Inputs: 
%		Tempo: controls the tempo of the song. This is a number between 0 and 1
%		Octive: The ocive of the song (normally 4)
%		fs_kHz: sampling rate in kHz.
%       tempo_resolution: this is a value between 0 and 1. 1 being full 
%           resolution. Be careful setting this too high. 1 will lock up
%           your computer.
%       time_offset: This is the delay to the start of the song. This is an
%           index to the time scale, so the actual delay amount is
%           determined by multiple factors
%
% History:       4 January 2020 File created
%
%-----------------------------------------------------

%% Clear the Variables
clc
clear
close all

%% Set up the world
fs_kHz = 5;

% Set the tempo and the octive for the conductor
Octive = 4;
tempo_s = 0.8 %This is the time in seconds for each note

%% Parameters for code simulation
tempo_resolution = .05; %this is a value between 0 and 1. 1 being full resolution
time_offset = 60;   % This is the delay to the start of the song.
  
%% Create the song given the tempo
[song_freq_Hz, song_duration_s] = conductor_simulation(tempo_s,Octive);
song_sim = [song_duration_s; song_freq_Hz];

% form up the cumulative durations
cumulative_duration_s = zeros(1, length(song_duration_s));
cumulative_duration_s(1) =  song_duration_s(1);
for i=2:length(song_duration_s)
	cumulative_duration_s(i) = song_duration_s(i) + cumulative_duration_s(i-1);
end

total_duration_s = max(cumulative_duration_s);
fs_Hz = fs_kHz*1000; %Convert kHz to Hz
time_s = 0:(1/fs_Hz):total_duration_s;	%create a time vector

% There is some rounding error happening sometimes, so we are going to make
% the end value exact
time_s(length(time_s)) = total_duration_s;


%% Create the digital signal
min_time_index = 1; %start the min time index at the start
% loop through all the freqs and generate a sin wave for each freq
for i=1:length(song_freq_Hz)
	max_time_index = find(time_s >= cumulative_duration_s(i),1); %find the times that correspond to this duration of time
	digital_note = sin(2*pi*song_freq_Hz(i)*time_s(min_time_index:max_time_index)); %create the actual note
	min_time_index = max_time_index + 1; %shift to the next time region.
	if(i == 1)
        digital = digital_note;
    else
        digital = [digital, digital_note];
    end
    
end

%% Create a signal to test the system
%%Put two copies of the song together
signal = [digital, digital];
signal = circshift(signal, time_offset);


%% Plot the Time Domain
figure(1)
plot(time_s,digital)
xlabel("time (s)")
ylabel("Amplitude")
title("Row Row Row Your Boat")


%% Plot the frequency
figure(2)
freq_digital = fft(digital);
freq_digital = freq_digital(1:floor(length(digital)/2));
freq_axis_kHz = linspace(0, fs_kHz/2, length(freq_digital));
plot(freq_axis_kHz, abs(freq_digital))
xlabel("Frequency (kHz)")
ylabel("Amplitude")
title("Spectrum of Row Row Row Your Boat")

%% Do the envelope detection
Fs_kHz = 2;
song_envelope = envelope(signal,Fs_kHz); % get the envelope of the song

figure(4)
plot(song_envelope)
xlabel("Time (s)")
ylabel("Amplitude")
title("Envelope of Row Row Row Your Boat")
filename = 'song_test.wav';
audiowrite(filename, signal, Fs_kHz);        % save the song as a .wav file to listen to

%% Find the Tempo

% fft method
fft_envelope = fft(song_envelope);
fft_envelope(1:5) = 0;
freq_scale = linspace(-Fs_kHz/2, Fs_kHz/2, length(fft_envelope))
plot(freq_scale, abs(fftshift(fft_envelope)))
xlabel("Frequency (kHz)")
ylabel("Amplitude")
title("Tempo Spectrum")

% fft_envelope = fft_envelope(1:floor(length(signal)/2));
% DCBlock_envelope = highpass(real(fft_envelope), 1, Fs);     % use a highpass filter at 1Hz to eliminate low frequency noise
% LP_envelope = lowpass(DCBlock_envelope, 350, Fs);           % Low Pass filter to eliminate high frequency noise
% tempo_from_fft = max(LP_envelope)                           % find the tempo
% figure(5)
% plot(LP_envelope)
% xlabel("Frequency (kHz)")
% ylabel("Amplitude")
% title("Tempo Spectrum")
% 
% % array indexing method
% rest_amplitude = min(song_envelope);            % normalize amplitude of the rests
% rest = song_envelope < rest_amplitude +0.001;   % isolates the rests in the song by inverting the envelope array
% 
% rest_start = find(rest, 1);                     % look for the array index where the first rest begins
% rest_length = 4000;                             % 4000 indices between beginning and end of the rest
% rest_stop = (rest_start + rest_length);         % 
% tempo_from_indexing = time_s(rest_stop) - time_s(rest_start)  % find the tempo by 
% 
% figure(6)
% plot(rest)
% xlabel("Time (s)")
% ylabel("Amplitude")
% title("Envelope Inverse of Row Row Row Your Boat")


%% Sync the time

actual_time_offset_s = time_s(time_offset) %print out the actual start time to compare.
